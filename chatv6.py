import asyncio
import os
import base64
import json
import hashlib
import time
from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import run_async, local, run_js, info as session_info
from pywebio.exceptions import SessionClosedException
from collections import defaultdict
import glob

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
USERS_FILE = "chat_users.json"
DIALOG_INDEX_FILE = "dialog_index.json"
DIALOG_DIR = "dialogs"
ONLINE_STATUS_FILE = "online_status.json"
ENCRYPTION_KEY_FILE = "chat_key.bin"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
os.makedirs(DIALOG_DIR, exist_ok=True)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def get_encryption_key():
    if os.path.exists(ENCRYPTION_KEY_FILE):
        with open(ENCRYPTION_KEY_FILE, "rb") as f:
            return f.read()
    else:
        key = os.urandom(32)  # 256-bit –∫–ª—é—á –¥–ª—è –ª—É—á—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        with open(ENCRYPTION_KEY_FILE, "wb") as f:
            f.write(key)
        return key

# XOR-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
def xor_encrypt(message: str, key: bytes) -> str:
    message_bytes = message.encode()
    encrypted = bytearray()
    for i in range(len(message_bytes)):
        encrypted.append(message_bytes[i] ^ key[i % len(key)])
    return base64.b64encode(encrypted).decode()

# –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ XOR
def xor_decrypt(encrypted_message: str, key: bytes) -> str:
    data = base64.b64decode(encrypted_message)
    decrypted = bytearray()
    for i in range(len(data)):
        decrypted.append(data[i] ^ key[i % len(key)])
    return decrypted.decode()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def get_image_type(content: bytes) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –º–∞–≥–∏—á–µ—Å–∫–∏–º —á–∏—Å–ª–∞–º"""
    if content.startswith(b'\xFF\xD8\xFF'):
        return 'jpeg'
    elif content.startswith(b'\x89PNG\r\n\x1a\n'):
        return 'png'
    elif content.startswith(b'GIF87a') or content.startswith(b'GIF89a'):
        return 'gif'
    elif content.startswith(b'RIFF') and content[8:12] == b'WEBP':
        return 'webp'
    return 'jpeg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r") as f:
                return json.load(f)
        except:
            return {}
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f, indent=2)

# –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_user():
    users = load_users()
    
    while True:
        data = await input_group("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", [
            input("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∏–∫–Ω–µ–π–º", name="nickname", required=True),
            input("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å", name="password", type=PASSWORD, required=True),
            input("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å", name="password2", type=PASSWORD, required=True),
            checkbox(name="remember", options=["–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"])
        ])
        
        if data['password'] != data['password2']:
            toast("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!", color='error')
            continue
            
        if data['nickname'] in users:
            toast("–≠—Ç–æ—Ç –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç!", color='error')
            continue
            
        if data['nickname'] == 'üì¢':
            toast("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –Ω–∏–∫!", color='error')
            continue
            
        users[data['nickname']] = {
            'password_hash': hash_password(data['password']),
            'created_at': time.time()
        }
        save_users(users)
        toast("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", color='success')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–µ—Å—Å–∏–∏
        local.nickname = data['nickname']
        local.remember = data.get('remember', False)
            
        return data['nickname']

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def login_user():
    users = load_users()
    
    while True:
        data = await input_group("–í—Ö–æ–¥ –≤ —á–∞—Ç", [
            input("–í–∞—à –Ω–∏–∫–Ω–µ–π–º", name="nickname", required=True),
            input("–í–∞—à –ø–∞—Ä–æ–ª—å", name="password", type=PASSWORD, required=True),
            checkbox(name="remember", options=["–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"]),
            actions(name="action", buttons=["–í–æ–π—Ç–∏", "–û—Ç–º–µ–Ω–∞"])
        ])
        
        if data['action'] == "–û—Ç–º–µ–Ω–∞":
            return None
            
        if data['nickname'] not in users:
            toast("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", color='error')
            continue
            
        if users[data['nickname']]['password_hash'] != hash_password(data['password']):
            toast("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!", color='error')
            continue
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–µ—Å—Å–∏–∏
        local.nickname = data['nickname']
        local.remember = data.get('remember', False)
            
        return data['nickname']

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –¥–∏–∞–ª–æ–≥–∞
def get_dialog_key(user1, user2):
    return f"{min(user1, user2)}_{max(user1, user2)}"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –¥–∏–∞–ª–æ–≥–æ–≤
def load_dialog_index():
    if os.path.exists(DIALOG_INDEX_FILE):
        try:
            with open(DIALOG_INDEX_FILE, "r") as f:
                return json.load(f)
        except:
            return {}
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–∏–∞–ª–æ–≥–æ–≤
def save_dialog_index(index):
    with open(DIALOG_INDEX_FILE, "w") as f:
        json.dump(index, f, indent=2)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
def load_dialog_history(user1, user2):
    dialog_key = get_dialog_key(user1, user2)
    file_path = os.path.join(DIALOG_DIR, f"{dialog_key}.json")
    
    if os.path.exists(file_path):
        try:
            with open(file_path, "r") as f:
                return json.load(f)
        except:
            return []
    return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
def save_dialog_history(user1, user2, history):
    dialog_key = get_dialog_key(user1, user2)
    file_path = os.path.join(DIALOG_DIR, f"{dialog_key}.json")
    
    with open(file_path, "w") as f:
        json.dump(history, f, indent=2)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    index = load_dialog_index()
    participants = sorted([user1, user2])
    
    index[dialog_key] = {
        "participants": participants,
        "last_message": time.time(),
        "unread": index.get(dialog_key, {}).get("unread", 0)
    }
    save_dialog_index(index)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–Ω–ª–∞–π–Ω
def load_online_status():
    if os.path.exists(ONLINE_STATUS_FILE):
        try:
            with open(ONLINE_STATUS_FILE, "r") as f:
                return json.load(f)
        except:
            return {}
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
def save_online_status(nickname):
    status = load_online_status()
    status[nickname] = time.time()
    with open(ONLINE_STATUS_FILE, "w") as f:
        json.dump(status, f, indent=2)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞
def is_user_online(nickname):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞"""
    online_status = load_online_status()
    last_seen = online_status.get(nickname, 0)
    return (time.time() - last_seen) < 300  # 5 –º–∏–Ω—É—Ç

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def get_last_seen(nickname):
    online_status = load_online_status()
    last_seen = online_status.get(nickname, 0)
    if last_seen == 0:
        return "–Ω–∏–∫–æ–≥–¥–∞"
    
    delta = int(time.time() - last_seen)
    if delta < 60:
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    elif delta < 3600:
        return f"{delta // 60} –º–∏–Ω –Ω–∞–∑–∞–¥"
    elif delta < 86400:
        return f"{delta // 3600} —á –Ω–∞–∑–∞–¥"
    else:
        return f"{delta // 86400} –¥–Ω –Ω–∞–∑–∞–¥"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
ENCRYPTION_KEY = get_encryption_key()
online_users = {}  # –Ω–∏–∫–Ω–µ–π–º: timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
MAX_IMAGE_SIZE = 6 * 1024 * 1024  # 2MB

async def clean_inactive_users():
    """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    while True:
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        current_time = time.time()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        status = load_online_status()
        changed = False
        for nickname, last_active in list(status.items()):
            if current_time - last_active > 300:  # 5 –º–∏–Ω—É—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                del status[nickname]
                changed = True
                
        if changed:
            with open(ONLINE_STATUS_FILE, "w") as f:
                json.dump(status, f, indent=2)

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    run_async(clean_inactive_users())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    nickname = getattr(local, 'nickname', None)
    remember = getattr(local, 'remember', False)
    
    if nickname:
        put_markdown(f"## üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {nickname}!")
    else:
        put_markdown("## üîí Secure Messenger")
        
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        action = await actions("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", [
            {'label': '–í–æ–π—Ç–∏', 'value': 'login'},
            {'label': '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', 'value': 'register'}
        ])
        
        if action == 'register':
            nickname = await register_user()
            if not nickname:
                return
        else:
            nickname = await login_user()
            if not nickname:
                return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    save_online_status(nickname)
    online_users[nickname] = time.time()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    while True:
        clear()
        put_markdown(f"## üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {nickname}")
        put_markdown(f"**–°—Ç–∞—Ç—É—Å:** üü¢ –æ–Ω–ª–∞–π–Ω")
        
        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        choice = await actions("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", [
            {'label': 'üí¨ –ú–æ–∏ –¥–∏–∞–ª–æ–≥–∏', 'value': 'dialogs'},
            {'label': 'üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'value': 'search'},
            {'label': 'üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'value': 'users'},
            {'label': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'value': 'settings'},
            {'label': 'üö™ –í—ã–π—Ç–∏', 'value': 'logout'}
        ])
        
        if choice == 'dialogs':
            await show_dialogs(nickname)
        elif choice == 'search':
            await find_user(nickname)
        elif choice == 'users':
            await show_all_users(nickname)
        elif choice == 'settings':
            await show_settings(nickname)
        elif choice == 'logout':
            # –¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –Ω–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            if nickname in online_users:
                del online_users[nickname]
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏—é, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            local.nickname = None
            toast("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!")
            reload_page()
            return

async def show_dialogs(nickname):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤"""
    clear()
    put_markdown(f"### üí¨ –ú–æ–∏ –¥–∏–∞–ª–æ–≥–∏")
    
    index = load_dialog_index()
    user_dialogs = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for dialog_key, data in index.items():
        if nickname in data["participants"]:
            other_user = data["participants"][0] if data["participants"][1] == nickname else data["participants"][1]
            last_message_time = time.strftime("%d.%m.%Y %H:%M", time.localtime(data["last_message"]))
            user_dialogs.append({
                "user": other_user,
                "last_active": data["last_message"],
                "unread": data.get("unread", 0),
                "last_message_time": last_message_time
            })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    user_dialogs.sort(key=lambda x: x["last_active"], reverse=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
    if not user_dialogs:
        put_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤")
        choice = await actions("", ['–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥', '–ù–∞–∑–∞–¥'])
        if choice == '–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥':
            await find_user(nickname)
        else:
            return
    else:
        options = []
        for dialog in user_dialogs:
            status = "üü¢" if is_user_online(dialog["user"]) else "‚ö™Ô∏è"
            unread_badge = f" üîî({dialog['unread']})" if dialog['unread'] > 0 else ""
            label = f"{status} {dialog['user']} {unread_badge} | {dialog['last_message_time']}"
            options.append({'label': label, 'value': dialog["user"]})
        
        options.append({'label': '–ù–∞–∑–∞–¥', 'value': 'back'})
        
        choice = await actions("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥:", buttons=options)
        
        if choice == 'back':
            return
        else:
            await show_dialog(nickname, choice)

async def show_all_users(nickname):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    clear()
    put_markdown("### üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    
    users = load_users()
    online_status = load_online_status()
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_list = [u for u in users.keys() if u != nickname]
    
    if not user_list:
        put_text("–î—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        put_button("–ù–∞–∑–∞–¥", onclick=lambda: run_async(main()))
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å—É
    user_list.sort(key=lambda u: online_status.get(u, 0), reverse=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    options = []
    for user in user_list:
        status = "üü¢ –æ–Ω–ª–∞–π–Ω" if is_user_online(user) else f"‚ö™Ô∏è {get_last_seen(user)}"
        options.append({'label': f"üë§ {user} | {status}", 'value': user})
    
    options.append({'label': '–ù–∞–∑–∞–¥', 'value': 'back'})
    
    choice = await actions("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", buttons=options)
    
    if choice == 'back':
        return
    else:
        await show_dialog(nickname, choice)

async def find_user(nickname):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    clear()
    put_markdown("### üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    users = load_users()
    online_status = load_online_status()
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_list = [u for u in users.keys() if u != nickname]
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä name
    search = await input("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
    if search:
        user_list = [u for u in user_list if search.lower() in u.lower()]
    
    if not user_list:
        put_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        put_button("–ù–∞–∑–∞–¥", onclick=lambda: run_async(main()))
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    options = []
    for user in user_list:
        status = "üü¢ –æ–Ω–ª–∞–π–Ω" if is_user_online(user) else f"‚ö™Ô∏è {get_last_seen(user)}"
        options.append({'label': f"üë§ {user} | {status}", 'value': user})
    
    options.append({'label': '–ù–∞–∑–∞–¥', 'value': 'back'})
    
    choice = await actions("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", buttons=options)
    
    if choice == 'back':
        return
    else:
        await show_dialog(nickname, choice)

async def show_dialog(nickname, contact):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    save_online_status(nickname)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history = load_dialog_history(nickname, contact)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    dialog_key = get_dialog_key(nickname, contact)
    index = load_dialog_index()
    if dialog_key in index:
        index[dialog_key]["unread"] = 0
        save_dialog_index(index)
    
    clear()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞
    status = "üü¢ –æ–Ω–ª–∞–π–Ω" if is_user_online(contact) else f"‚ö™Ô∏è {get_last_seen(contact)}"
    put_markdown(f"### üí¨ –î–∏–∞–ª–æ–≥ —Å {contact} ({status})")
    
    # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
    for msg in history:
        if msg['type'] == 'text':
            try:
                decrypted = xor_decrypt(msg['content'], ENCRYPTION_KEY)
                sender = "–í—ã" if msg['sender'] == nickname else contact
                timestamp = time.strftime("%H:%M", time.localtime(msg['timestamp']))
                msg_box.append(put_markdown(f"**{sender}** ({timestamp}): {decrypted}"))
            except:
                msg_box.append(put_markdown(f"**–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è**"))
        elif msg['type'] == 'image':
            sender = "–í—ã" if msg['sender'] == nickname else contact
            timestamp = time.strftime("%H:%M", time.localtime(msg['timestamp']))
            msg_box.append(put_markdown(f"**{sender}** ({timestamp}) –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:"))
            msg_box.append(put_image(msg['data']))
    
    # –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    local.active_dialog = True

    async def check_for_updates():
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        last_count = len(history)
        while getattr(local, 'active_dialog', False):
            await asyncio.sleep(2)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            current_history = load_dialog_history(nickname, contact)
            
            # –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(current_history) > last_count:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞)
                for msg in current_history[last_count:]:
                    if msg['sender'] == contact:  # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                        if msg['type'] == 'text':
                            try:
                                decrypted = xor_decrypt(msg['content'], ENCRYPTION_KEY)
                                timestamp = time.strftime("%H:%M", time.localtime(msg['timestamp']))
                                msg_box.append(put_markdown(f"**{contact}** ({timestamp}): {decrypted}"))
                            except:
                                msg_box.append(put_markdown(f"**–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è**"))
                        elif msg['type'] == 'image':
                            timestamp = time.strftime("%H:%M", time.localtime(msg['timestamp']))
                            msg_box.append(put_markdown(f"**{contact}** ({timestamp}) –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:"))
                            msg_box.append(put_image(msg['data']))
                
                last_count = len(current_history)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    run_async(check_for_updates())
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–æ
    try:
        while True:
            # –ì—Ä—É–ø–ø–∞ —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            data = await input_group("üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", [
                input(placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", name="msg"),
                actions(name="cmd", buttons=[
                    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", 
                    {'label': "üì∑ –§–æ—Ç–æ", 'value': 'photo'},
                    {'label': "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", 'value': 'clear'},
                    {'label': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 'type': 'cancel'}
                ])
            ])
            
            if data is None:  # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                break
                
            if data['cmd'] == 'clear':
                save_dialog_history(nickname, contact, [])
                toast("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!", color='success')
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
                await show_dialog(nickname, contact)
                return
                
            elif data['cmd'] == 'photo':
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                try:
                    img_info = await file_upload(
                        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG, PNG, GIF)", 
                        accept="image/*", 
                        max_size=MAX_IMAGE_SIZE
                    )
                    
                    if img_info:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        img_type = get_image_type(img_info['content'])
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º base64 —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        img_data = base64.b64encode(img_info['content']).decode('utf-8')
                        img_src = f"data:image/{img_type};base64,{img_data}"
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                        new_message = {
                            'type': 'image',
                            'sender': nickname,
                            'data': img_src,
                            'timestamp': time.time()
                        }
                        
                        history.append(new_message)
                        save_dialog_history(nickname, contact, history)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        timestamp = time.strftime("%H:%M", time.localtime())
                        msg_box.append(put_markdown(f"**–í—ã** ({timestamp}) –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:"))
                        msg_box.append(put_image(img_src))
                except Exception as e:
                    toast(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}", color='error')
                    
            elif data['cmd'] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and data['msg'].strip():
                # –®–∏—Ñ—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                encrypted = xor_encrypt(data['msg'], ENCRYPTION_KEY)
                new_message = {
                    'type': 'text',
                    'sender': nickname,
                    'content': encrypted,
                    'timestamp': time.time()
                }
                
                history.append(new_message)
                save_dialog_history(nickname, contact, history)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                timestamp = time.strftime("%H:%M", time.localtime())
                msg_box.append(put_markdown(f"**–í—ã** ({timestamp}): {data['msg']}"))
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        local.active_dialog = False
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –¥–∏–∞–ª–æ–≥–æ–≤
    await show_dialogs(nickname)

async def show_settings(nickname):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    clear()
    put_markdown(f"### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞")
    
    action = await actions("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", [
        {'label': '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', 'value': 'password'},
        {'label': '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'value': 'back'}
    ])
    
    if action == 'back':
        return
    
    if action == 'password':
        await change_password(nickname)

async def change_password(nickname):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
    users = load_users()
    
    data = await input_group("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", [
        input("–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å", name="current", type=PASSWORD, required=True),
        input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", name="new", type=PASSWORD, required=True),
        input("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", name="new2", type=PASSWORD, required=True)
    ])
    
    if users[nickname]['password_hash'] != hash_password(data['current']):
        toast("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å!", color='error')
        return
        
    if data['new'] != data['new2']:
        toast("–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!", color='error')
        return
        
    users[nickname]['password_hash'] = hash_password(data['new'])
    save_users(users)
    toast("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", color='success')
    put_button("–ù–∞–∑–∞–¥", onclick=lambda: run_async(show_settings(nickname)))

def reload_page():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        run_js('window.location.reload()')
    except:
        toast("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ä—É—á–Ω—É—é", color='error')

if __name__ == "__main__":
    start_server(
        main, 
        port=8080, 
        host='0.0.0.0',
        debug=True,
        cdn=False,
        allowed_origins="*",
        session_expire_seconds=3600 * 24 * 7,  # 1 –Ω–µ–¥–µ–ª—è
        reconnect_timeout=60,
    )
